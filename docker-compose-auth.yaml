# Identity server instance for use in testing. 
# In your app set:
# Authority=http://authserver:8080
# Audience=http://localhost:5000
# Example curl request to get a logged in JWT:
# curl --request POST --url 'http://localhost:5010/connect/token' --header 'content-type: application/x-www-form-urlencoded' --data grant_type=password --data 'username=admin' --data 'password=pwd' --data 'audience=http://localhost:5000' --data 'client_id=pwd-client' --data 'client_secret=client-credentials-mock-client-secret'
services:
  authserver:
      container_name: authserver
      image: ghcr.io/soluto/oidc-server-mock:latest
      ports:
        - "5010:8080"
      environment:
        #http only, otherwise we need to have a certificate set up
        ASPNETCORE_URLS: http://+:8080
        ASPNETCORE_ENVIRONMENT: Development
        #general identityserver options, IssuerUri must be set here to match api config
        SERVER_OPTIONS_INLINE: |
          {
            "AccessTokenJwtType": "JWT",
            "Discovery": {
              "ShowKeySet": true
            },
            "Authentication": {
              "CookieSameSiteMode": "Lax",
              "CheckSessionCookieSameSiteMode": "Lax"
            },
            "IssuerUri":"http://authserver:8080"
          }
        LOGIN_OPTIONS_INLINE: |
          {
            "AllowRememberLogin": false
          }
        LOGOUT_OPTIONS_INLINE: |
          {
            "AutomaticRedirectAfterSignOut": true
          }
        #just one scope to keep it simple, this defines which claims will be added to the jwt
        API_SCOPES_INLINE: |
          [
            {
              "Name": "api",
              "UserClaims": ["Role",  "Name"]
            }
          ]
        #this sets the aud or audience for the token, must match api set up
        #scope must match scope defined above
        API_RESOURCES_INLINE: |
          - Name: http://localhost:5000
            Scopes:
              - api
              - profile
              - email
              - openid
        #add users here with claim values
        USERS_CONFIGURATION_INLINE: |
          [
            {
              "SubjectId":"1",
              "Username":"admin",
              "Password":"pwd",
              "Claims": [
                {
                  "Type": "Name",
                  "Value": "admin",
                  "ValueType": "string"
                },
                {
                  "Type": "email",
                  "Value": "admin@example.com",
                  "ValueType": "string"
                },
                {
                  "Type": "Role",
                  "Value":  "admin"
                }
              ]
            },
            {
              "SubjectId":"2",
              "Username":"user",
              "Password":"pwd",
              "Claims": [
                {
                  "Type": "name",
                  "Value": "user",
                  "ValueType": "string"
                },
                {
                  "Type": "email",
                  "Value": "user@example.com",
                  "ValueType": "string"
                },
                {
                  "Type": "user",
                  "Value":  "0"
                }
              ]
            }
          ]
        # Resource owner password client set up here, clientid and clientsecrets
        # are needed to get a token as well as username and password 
        CLIENTS_CONFIGURATION_INLINE: |
          [
            {
              "ClientId": "pwd-client",
              "ClientSecrets": ["client-credentials-mock-client-secret"],
              "Description": "Client for password credentials flow",
              "AllowedGrantTypes": ["password"],
              "AllowedScopes": ["openid", "profile", "email", "api"],
            }
          ]
