/* tslint:disable */
/* eslint-disable */
/**
 * Todo List ASP.NET Web API
 * For more information see https://github.com/DanielNieuwoudt/developer-assessment.git
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InternalError
 */
export interface InternalError {
    /**
     * URI reference that identifies the error type.
     * @type {string}
     * @memberof InternalError
     */
    'type'?: string;
    /**
     * Summary of why the request failed.
     * @type {string}
     * @memberof InternalError
     */
    'title'?: string;
    /**
     * The HTTP code.
     * @type {string}
     * @memberof InternalError
     */
    'status'?: string;
    /**
     * Request identifier for support purposes.
     * @type {string}
     * @memberof InternalError
     */
    'traceId'?: string;
}
/**
 * 
 * @export
 * @interface TodoItem
 */
export interface TodoItem {
    /**
     * 
     * @type {string}
     * @memberof TodoItem
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TodoItem
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TodoItem
     */
    'isComplete'?: boolean;
}

/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTodoItem', 'id', id)
            const localVarPath = `/TodoItems/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TodoItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TodoItem} [todoItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodoItem: async (todoItem?: TodoItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/TodoItems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TodoItem} [todoItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTodoItem: async (id: string, todoItem?: TodoItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTodoItem', 'id', id)
            const localVarPath = `/TodoItems/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(todoItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodoItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TodoItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TodoItem} [todoItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTodoItem(todoItem?: TodoItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TodoItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTodoItem(todoItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {TodoItem} [todoItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTodoItem(id: string, todoItem?: TodoItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTodoItem(id, todoItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoItem(id: string, options?: any): AxiosPromise<TodoItem> {
            return localVarFp.getTodoItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoItems(options?: any): AxiosPromise<Array<TodoItem>> {
            return localVarFp.getTodoItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TodoItem} [todoItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTodoItem(todoItem?: TodoItem, options?: any): AxiosPromise<TodoItem> {
            return localVarFp.postTodoItem(todoItem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {TodoItem} [todoItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTodoItem(id: string, todoItem?: TodoItem, options?: any): AxiosPromise<void> {
            return localVarFp.putTodoItem(id, todoItem, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - interface
 * @export
 * @interface TodoApi
 */
export interface TodoApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApiInterface
     */
    getTodoItem(id: string, options?: AxiosRequestConfig): AxiosPromise<TodoItem>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApiInterface
     */
    getTodoItems(options?: AxiosRequestConfig): AxiosPromise<Array<TodoItem>>;

    /**
     * 
     * @param {TodoItem} [todoItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApiInterface
     */
    postTodoItem(todoItem?: TodoItem, options?: AxiosRequestConfig): AxiosPromise<TodoItem>;

    /**
     * 
     * @param {string} id 
     * @param {TodoItem} [todoItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApiInterface
     */
    putTodoItem(id: string, todoItem?: TodoItem, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI implements TodoApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getTodoItem(id: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).getTodoItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public getTodoItems(options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).getTodoItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TodoItem} [todoItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public postTodoItem(todoItem?: TodoItem, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).postTodoItem(todoItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {TodoItem} [todoItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public putTodoItem(id: string, todoItem?: TodoItem, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).putTodoItem(id, todoItem, options).then((request) => request(this.axios, this.basePath));
    }
}



